//For a given a Binary Tree of type integer, print it in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion and a single space will separate them.
//Example:
//alt txt
//
//For the above-depicted tree, when printed in a level order fashion, the output would look like:
//
//10
//20 30 
//40 50 60
//Where each new line denotes the level in the tree.
//Input Format:
//The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
//Output Format:
//The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
//Elements on every level will be printed in a linear fashion. A single space will separate them.

/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
#include<bits/stdc++.h>
void printLevelWise(BinaryTreeNode<int> *root) {
    // Write your code here
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        BinaryTreeNode<int> *curr=q.front();
        q.pop();
        if(curr==NULL){
            if(q.empty())
                return;
            q.push(NULL);
            cout<<endl;
            continue;
        }
        cout<<curr->data<<" ";
        if(curr->left!=NULL){
            q.push(curr->left);
        }
        if(curr->right!=NULL){
            q.push(curr->right);
        }
    }
    
    
}
